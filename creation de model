# Importation des bibliothèques nécessaires

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Préparation des données

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_dir = "C:\\Users\\user\\Desktop\\CAT_DOG\\training_set"
test_dir = "C:\\Users\\user\\Desktop\\CAT_DOG\\test_set"

training_set = train_datagen.flow_from_directory(train_dir, target_size=(64, 64), batch_size=32, class_mode='binary')
test_set = test_datagen.flow_from_directory(test_dir, target_size=(64, 64), batch_size=32, class_mode='binary')

# Construction du modèle CNN

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

# Compilation du modèle

model.compile(
    loss='binary_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

# Entraînement du modèle

model.fit(training_set, epochs=10, validation_data=test_set)

# Importation des bibliothèques nécessaires

from tensorflow.keras.preprocessing import image
import numpy as np
import tensorflow as tf

# Essayez le modèle sur une nouvelle image

img_path = 'C:\\Users\\user\\Desktop\\TELE VID\\CT.jpg' 
img = image.load_img(img_path, target_size=(64, 64))
img_array = image.img_to_array(img) / 255.0 
img_array = np.expand_dims(img_array, axis=0) 

# Prédiction sur l'image

prediction = classifier.predict(img_array)
if prediction[0][0] > 0.5:
    print("C'est un chien")
else:
    print("C'est un chat")
plt.imshow(img)
plt.show()
